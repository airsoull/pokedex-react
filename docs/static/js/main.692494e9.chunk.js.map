{"version":3,"sources":["components/Header.jsx","components/pokemon-detail/PokemonType.jsx","components/pokemon-detail/PokemonImage.jsx","components/Pokemon.jsx","components/PokemonCard.jsx","components/Loading.jsx","hooks/useFetchAllPokemon.jsx","components/PokemonList.jsx","helpers/urls.js","hooks/useFetch.jsx","hooks/useFetchPokemon.jsx","components/pokemon-detail/PokemonStat.jsx","components/pokemon-detail/PokemonDetailCard.jsx","components/PokemonDetail.jsx","components/Pokedex.jsx","serviceWorker.js","index.js"],"names":["Header","className","PokemonType","name","type","PokemonImage","imageURl","pokemonName","src","alt","loading","Pokemon","React","memo","pokemon","sprites","types","id","to","front_default","map","key","PokemonCard","propTypes","PropTypes","object","isRequired","Loading","extraClass","cssClass","role","defaultProps","cacheURL","useFetchAllPokemon","url","useState","load","setLoad","result","setResult","isMounted","useRef","getPokemon","a","axios","get","data","Promise","all","results","poke","i","res","useEffect","current","then","string","PokemonList","baseUrl","setBaseUrl","previous","next","onClick","useFetch","initialState","error","state","setState","fetch","response","json","useFetchPokemon","pokemonID","pokemonURL","PokemonStat","stat","base_stat","PokemonDetailCard","stats","weight","base_experience","spriteKeys","Object","keys","s","k","PokemonDetail","pokemonid","match","params","Pokedex","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.692494e9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header className=\"mb-3\">\n    Pokedex\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst PokemonType = ({ type }) => {\n  const { name } = type;\n  const className = `type ${name}`;\n  return (<div className={className}>{name}</div>);\n};\n\nexport default PokemonType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PokemonImage = ({ imageURl, pokemonName }) => (\n  <div className=\"pokemon-image mx-auto\">\n    <img src={imageURl} alt={pokemonName} loading=\"lazy\" />\n  </div>\n);\n\nPokemonImage.propTypes = {\n  imageURl: PropTypes.string.isRequired,\n  pokemonName: PropTypes.string.isRequired,\n};\n\nexport default PokemonImage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport PokemonType from './pokemon-detail/PokemonType';\nimport PokemonImage from './pokemon-detail/PokemonImage';\n\nconst Pokemon = React.memo(({ pokemon }) => {\n  const {\n    name,\n    sprites,\n    types,\n    id,\n  } = pokemon;\n\n  return (\n    <div className=\"pokemon\">\n      <figure className=\"figure\">\n        <Link to={() => `/pokemon/${id}`}>\n          {!!sprites && <PokemonImage imageURl={sprites.front_default} pokemonName={name} />}\n          <figcaption className=\"pokemon-name\">{name}</figcaption>\n        </Link>\n      </figure>\n      <div className=\"types d-flex justify-content-center\">\n        {\n          !!types && types.map(\n            ({ type }) => (\n              <PokemonType key={type.name} type={type} />\n            ),\n          )\n        }\n      </div>\n    </div>\n  );\n});\n\nPokemon.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n};\n\nexport default Pokemon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Pokemon from './Pokemon';\n\nconst PokemonCard = React.memo(({ pokemon }) => (\n  <div className=\"pokemon pokemon-card\">\n    <Pokemon pokemon={pokemon} />\n  </div>\n));\n\nPokemonCard.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n};\n\nexport default PokemonCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Loading = ({ extraClass }) => {\n  const cssClass = `spinner-border ${extraClass}`;\n  return (\n    <div className={cssClass} role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n};\n\nLoading.propTypes = {\n  extraClass: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  extraClass: '',\n};\n\nexport default Loading;\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nconst cacheURL = {};\n\nconst useFetchAllPokemon = (url) => {\n  const [load, setLoad] = useState(true);\n  const [result, setResult] = useState({});\n  const isMounted = useRef(true);\n\n  const clearState = () => {\n    setLoad(true);\n    setResult({});\n  };\n\n  const getPokemon = async () => {\n    if (url in cacheURL) {\n      return cacheURL[url];\n    }\n\n    const { data } = await axios.get(url);\n    await Promise.all(data.results.map(\n      async (poke, i) => {\n        const res = await axios.get(poke.url);\n        data.results[i] = res.data;\n      },\n    ));\n    return data;\n  };\n\n  useEffect(() => () => { isMounted.current = false; }, []);\n  useEffect(() => {\n    clearState();\n    getPokemon()\n      .then((data) => {\n        if (isMounted.current) {\n          setResult(data);\n          setLoad(false);\n          cacheURL[url] = data;\n        }\n      });\n  }, [url]);\n\n  return [load, result];\n};\n\nuseFetchAllPokemon.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default useFetchAllPokemon;\n","import React, { useState } from 'react';\nimport PokemonCard from './PokemonCard';\nimport Loading from './Loading';\n\nimport { baseURL } from '../helpers/urls';\nimport useFetchAllPokemon from '../hooks/useFetchAllPokemon';\n\nconst PokemonList = React.memo(() => {\n  const [baseUrl, setBaseUrl] = useState(`${baseURL()}?limit=21`);\n  const [loading, data] = useFetchAllPokemon(baseUrl);\n  const { previous, next, results } = !!data && data;\n\n  const nextUrl = () => !!next && setBaseUrl(next);\n  const previousUrl = () => !!previous && setBaseUrl(previous);\n\n  return (\n    <div className=\"container\">\n      <div className=\"d-flex justify-content-center mb-3\">\n        <button\n          type=\"button\"\n          className=\"btn btn-success btn-lg m-1\"\n          onClick={previousUrl}\n        >\n          Previous\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-success btn-lg m-1\"\n          onClick={nextUrl}\n        >\n          Next\n        </button>\n      </div>\n      <div className=\"row justify-content-center\">\n        {\n          loading\n            ? <Loading />\n            : results.map(\n              (pokemon) => (\n                <div className=\"col-sm-12 col-md-6 col-lg-4\" key={pokemon.id}>\n                  <PokemonCard\n                    key={pokemon.id}\n                    pokemon={pokemon}\n                  />\n                </div>\n              ),\n            )\n        }\n      </div>\n    </div>\n  );\n});\n\nexport default PokemonList;\n","const baseURL = () => (\n  'https://pokeapi.co/api/v2/pokemon/'\n);\n\nconst pokemonURL = (pokemonID) => (\n  `${baseURL()}${pokemonID}`\n);\n\nexport { baseURL, pokemonURL };\n","import { useState, useEffect, useRef } from 'react';\n\nconst useFetch = (url) => {\n  const initialState = {\n    data: [],\n    loading: true,\n    error: null,\n  };\n\n  const isMounted = useRef(true);\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => (() => { isMounted.current = false; }), []);\n  const clearState = () => setState({ ...initialState });\n\n  useEffect(() => {\n    clearState();\n\n    fetch(url)\n      .then(\n        (response) => response.json(),\n      )\n      .then((data) => {\n        if (isMounted.current) {\n          setState({\n            ...initialState,\n            loading: false,\n            data,\n          });\n        }\n      });\n  }, [url]);\n\n  return state;\n};\n\nexport default useFetch;\n","import useFetch from './useFetch';\nimport { pokemonURL } from '../helpers/urls';\n\nconst useFetchPokemon = (pokemonID) => (\n  useFetch(pokemonURL(pokemonID))\n);\n\nexport default useFetchPokemon;\n","import React from 'react';\n\nconst PokemonStat = ({ stat }) => {\n  const { base_stat } = stat;\n  return (\n    <span className=\"pokemon-data-label data-pokemon\">\n      {stat.stat.name}\n      <span className=\"badge-number\">\n        {base_stat}\n      </span>\n    </span>\n  );\n};\n\nexport default PokemonStat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PokemonType from './PokemonType';\nimport PokemonStat from './PokemonStat';\nimport PokemonImage from './PokemonImage';\n\nconst PokemonDetailCard = ({ pokemon }) => {\n  const {\n    name,\n    sprites,\n    types,\n    stats,\n    weight,\n    base_experience,\n  } = pokemon;\n\n  const spriteKeys = Object.keys(sprites);\n\n  return (\n    <div className=\"container pokemon pokemon-detail\">\n      {/* pokemon detail */}\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-sm-12 col-md-4 justify-content-center\">\n          <PokemonImage imageURl={sprites.front_default} pokemonName={name} />\n        </div>\n        <div className=\"col-sm-12 col-md-4 mt-3 text-center\">\n          <span className=\"pokemon-name h5\">{name}</span>\n          <div className=\"types d-flex justify-content-center mt-3\">\n            {\n              types.map(\n                ({ type }) => (\n                  <PokemonType key={type.name} type={type} />\n                ),\n              )\n            }\n          </div>\n        </div>\n      </div>\n\n      {/* pokemon information */}\n      <div className=\"row pokemon-info\">\n        <div className=\"col-sm-12 col-md-6\">\n          <span className=\"pokemon-data-label data-pokemon\">\n            weight\n            <span className=\"badge-number\">{weight}</span>\n          </span>\n        </div>\n        <div className=\"col-sm-12 col-md-6\">\n          <span className=\"pokemon-data-label data-pokemon\">\n            base experience\n            <span className=\"badge-number\">\n              {base_experience}\n            </span>\n          </span>\n        </div>\n      </div>\n\n      {/* stats */}\n      <div className=\"row pokemon-info mt-3\">\n        {\n          stats.map(\n            (s) => (\n              <div className=\"col-sm-12 col-md-6\" key={s.stat.name}>\n                <PokemonStat key={s.stat.name} stat={s} />\n              </div>\n            ),\n          )\n        }\n      </div>\n\n      {/* pokemon images */}\n      <div className=\"row\">\n        <div className=\"col-md-12 text-center\">\n          {spriteKeys.map((k) => (\n            !!sprites[k] && <img src={sprites[k]} alt={name} key={k} loading=\"lazy\" />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPokemonDetailCard.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n};\n\nexport default PokemonDetailCard;\n","import React from 'react';\n\nimport Loading from './Loading';\nimport useFetchPokemon from '../hooks/useFetchPokemon';\nimport PokemonDetailCard from './pokemon-detail/PokemonDetailCard';\n\nconst PokemonDetail = ({ match }) => {\n  const { pokemonid } = match.params;\n  const { loading, data } = useFetchPokemon(pokemonid);\n\n  return (\n    <>\n      {\n        loading\n          ? <div className=\"text-center\"><Loading /></div>\n          : <PokemonDetailCard pokemon={data} />\n      }\n    </>\n  );\n};\n\nexport default PokemonDetail;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Header from './Header';\nimport PokemonList from './PokemonList';\nimport PokemonDetail from './PokemonDetail';\n\nconst Pokedex = () => (\n  <Router>\n    <Header />\n    <Switch>\n      <Route path=\"/pokemon/:pokemonid\" component={PokemonDetail} />\n      <Route exact path=\"/\" component={PokemonList} />\n    </Switch>\n  </Router>\n);\n\nexport default Pokedex;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pokedex from './components/Pokedex';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pokedex />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}